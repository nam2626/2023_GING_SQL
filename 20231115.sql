--게시판 테이블
CREATE TABLE BOARD_MEMBER(
	MEMBER_ID VARCHAR2(30),
	MEMBER_PASSWD CHAR(128),
	MEMBER_NAME VARCHAR2(30),
	MEMBER_NICK VARCHAR2(30)	
);

CREATE TABLE BOARD(
	BOARD_NO NUMBER,
	BOARD_TITLE VARCHAR2(300),
	BOARD_CONTENT VARCHAR2(3000),
	BOARD_WRITE_TIME DATE DEFAULT SYSDATE,
	BOARD_COUNT NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_LIKE(
	BOARD_NO NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_HATE(
	BOARD_NO NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_COMMENT(
	BOARD_COMMENT_NO NUMBER,
	BOARD_COMMENT_CONTENT VARCHAR2(1000),
	BOARD_COMMENT_TIME DATE DEFAULT SYSDATE,
	BOARD_NO NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_COMMENT_LIKE(
	BOARD_COMMENT_NO NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_COMMENT_HATE(
	BOARD_COMMENT_NO NUMBER,
	MEMBER_ID VARCHAR2(30)
);

CREATE TABLE BOARD_FILE(
	BOARD_FILE_NO CHAR(10),
	BOARD_NO NUMBER,
	BOARD_FILE_URL VARCHAR2(500)
);

--제약 조건
ALTER TABLE BOARD_MEMBER ADD CONSTRAINT BOARD_MEMBER_PK PRIMARY KEY(MEMBER_ID);

ALTER TABLE BOARD ADD CONSTRAINT BOARD_PK PRIMARY KEY(BOARD_NO);
ALTER TABLE BOARD ADD CONSTRAINT BOARD_FK_MEMBER_ID 
FOREIGN KEY(MEMBER_ID) REFERENCES BOARD_MEMBER(MEMBER_ID) ON DELETE CASCADE;
 
ALTER TABLE BOARD_LIKE ADD 
CONSTRAINT BOARD_LIKE_PK PRIMARY KEY(BOARD_NO, MEMBER_ID);

ALTER TABLE BOARD_LIKE ADD CONSTRAINT BOARD_LIKE_FK_BNO
FOREIGN KEY (BOARD_NO) REFERENCES BOARD(BOARD_NO);

ALTER TABLE BOARD_LIKE ADD CONSTRAINT BOARD_LIKE_FK_MID
FOREIGN KEY (MEMBER_ID) REFERENCES BOARD_MEMBER(MEMBER_ID);

ALTER TABLE BOARD_HATE ADD 
CONSTRAINT BOARD_HATE_PK PRIMARY KEY(BOARD_NO, MEMBER_ID);

ALTER TABLE BOARD_HATE ADD CONSTRAINT BOARD_HATE_FK_BNO
FOREIGN KEY (BOARD_NO) REFERENCES BOARD(BOARD_NO);

ALTER TABLE BOARD_HATE ADD CONSTRAINT BOARD_HATE_FK_MID
FOREIGN KEY (MEMBER_ID) REFERENCES BOARD_MEMBER(MEMBER_ID);


ALTER TABLE BOARD_COMMENT 
ADD CONSTRAINT BOARD_COMMENT_PK PRIMARY KEY(BOARD_COMMENT_NO);

ALTER TABLE BOARD_COMMENT_LIKE ADD 
CONSTRAINT BOARD_COMMENT_LIKE_PK PRIMARY KEY(BOARD_COMMENT_NO, MEMBER_ID);

ALTER TABLE BOARD_COMMENT_LIKE ADD CONSTRAINT BOARD_COMMENT_LIKE_FK_BNO
FOREIGN KEY (BOARD_COMMENT_NO) REFERENCES BOARD_COMMENT(BOARD_COMMENT_NO);

ALTER TABLE BOARD_COMMENT_LIKE ADD CONSTRAINT BOARD_COMMENT_LIKE_FK_MID
FOREIGN KEY (MEMBER_ID) REFERENCES BOARD_MEMBER(MEMBER_ID);

ALTER TABLE BOARD_COMMENT_HATE ADD 
CONSTRAINT BOARD_COMMENT_HATE_PK PRIMARY KEY(BOARD_COMMENT_NO, MEMBER_ID);

ALTER TABLE BOARD_COMMENT_HATE ADD CONSTRAINT BOARD_COMMENT_HATE_FK_BNO
FOREIGN KEY (BOARD_COMMENT_NO) REFERENCES BOARD_COMMENT(BOARD_COMMENT_NO);

ALTER TABLE BOARD_COMMENT_HATE ADD CONSTRAINT BOARD_COMMENT_HATE_FK_MID
FOREIGN KEY (MEMBER_ID) REFERENCES BOARD_MEMBER(MEMBER_ID);

ALTER TABLE BOARD_FILE 
ADD CONSTRAINT BOARD_FILE_PK PRIMARY KEY(BOARD_FILE_NO);

ALTER TABLE BOARD_FILE 
ADD CONSTRAINT BOARD_FILE_FK_BNO FOREIGN KEY(BOARD_NO) REFERENCES BOARD(BOARD_NO);

--게시글 번호, 댓글 번호
DROP SEQUENCE BOARD_SEQ_BNO;
CREATE SEQUENCE BOARD_SEQ_BNO
START WITH 101;

DROP SEQUENCE BOARD_COMMENT_SEQ_CNO;
CREATE SEQUENCE BOARD_COMMENT_SEQ_CNO
START WITH 301;

SELECT BOARD_SEQ_BNO.NEXTVAL FROM DUAL;

--아래 컬럼을 조회하는 SQL문을 작성
--게시글 번호 / 게시글 제목 / 댓글 개수 / 조회수 / 작성자(닉네임) / 작성일 / 좋아요 / 싫어요 
-- 1. 게시글 번호 / 게시글 제목 / 조회수 / 작성자(닉네임) / 작성일
SELECT BOARD_NO, BOARD_TITLE, BOARD_COUNT, BM.MEMBER_NICK, B.BOARD_WRITE_TIME 
FROM BOARD B JOIN BOARD_MEMBER BM ON B.MEMBER_ID = BM.MEMBER_ID;
-- 2. 게시글 번호 / 댓글 개수
SELECT BC.BOARD_NO, COUNT(*) AS BOARD_COMMENT_COUNT FROM BOARD_COMMENT BC
GROUP BY BC.BOARD_NO; 
-- 3. 게시글 번호 / 좋아요
SELECT BL.BOARD_NO, COUNT(*) AS BOARD_LIKE_COUNT 
FROM BOARD_LIKE BL GROUP BY BL.BOARD_NO;
-- 4. 게시글 번호 / 싫어요
SELECT BH.BOARD_NO, COUNT(*) AS BOARD_HATE_COUNT 
FROM BOARD_HATE BH GROUP BY BH.BOARD_NO;
-- 1~4까지 하나로 합침
SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_COUNT, 
B.MEMBER_NICK, B.BOARD_WRITE_TIME, 
NVL(BC.BOARD_COMMENT_COUNT,0) AS BOARD_COMMENT_COUNT, 
NVL(BL.BOARD_LIKE_COUNT,0) AS BOARD_LIKE_COUNT, 
NVL(BH.BOARD_HATE_COUNT,0) AS BOARD_HATE_COUNT 
FROM 
(SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_COUNT, BM.MEMBER_NICK, B.BOARD_WRITE_TIME 
FROM BOARD B JOIN BOARD_MEMBER BM ON B.MEMBER_ID = BM.MEMBER_ID) B
LEFT OUTER JOIN
(SELECT BC.BOARD_NO, COUNT(*) AS BOARD_COMMENT_COUNT FROM BOARD_COMMENT BC
GROUP BY BC.BOARD_NO) BC ON B.BOARD_NO = BC.BOARD_NO
LEFT OUTER JOIN 
(SELECT BL.BOARD_NO, COUNT(*) AS BOARD_LIKE_COUNT 
FROM BOARD_LIKE BL GROUP BY BL.BOARD_NO) BL ON B.BOARD_NO = BL.BOARD_NO
LEFT OUTER JOIN
(SELECT BH.BOARD_NO, COUNT(*) AS BOARD_HATE_COUNT 
FROM BOARD_HATE BH GROUP BY BH.BOARD_NO) BH ON B.BOARD_NO = BH.BOARD_NO;

--뷰
CREATE OR REPLACE VIEW BOARD_VIEW
AS 
SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_COUNT, 
B.MEMBER_NICK, B.BOARD_WRITE_TIME, 
NVL(BC.BOARD_COMMENT_COUNT,0) AS BOARD_COMMENT_COUNT, 
NVL(BL.BOARD_LIKE_COUNT,0) AS BOARD_LIKE_COUNT, 
NVL(BH.BOARD_HATE_COUNT,0) AS BOARD_HATE_COUNT 
FROM 
(SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_COUNT, BM.MEMBER_NICK, B.BOARD_WRITE_TIME 
FROM BOARD B JOIN BOARD_MEMBER BM ON B.MEMBER_ID = BM.MEMBER_ID) B
LEFT OUTER JOIN
(SELECT BC.BOARD_NO, COUNT(*) AS BOARD_COMMENT_COUNT FROM BOARD_COMMENT BC
GROUP BY BC.BOARD_NO) BC ON B.BOARD_NO = BC.BOARD_NO
LEFT OUTER JOIN 
(SELECT BL.BOARD_NO, COUNT(*) AS BOARD_LIKE_COUNT 
FROM BOARD_LIKE BL GROUP BY BL.BOARD_NO) BL ON B.BOARD_NO = BL.BOARD_NO
LEFT OUTER JOIN
(SELECT BH.BOARD_NO, COUNT(*) AS BOARD_HATE_COUNT 
FROM BOARD_HATE BH GROUP BY BH.BOARD_NO) BH ON B.BOARD_NO = BH.BOARD_NO;
--VIEW 생성 권한
GRANT CREATE VIEW TO scott;

--VIEW
SELECT * FROM BOARD_VIEW;

--조회수가 800이상인 게시글 목록을 조회
SELECT * FROM BOARD_VIEW WHERE BOARD_COUNT >= 800;

--게시글 목록 조회시 최근에 쓴 글 순서대로 조회, 행번호도 추가해서 조회
SELECT ROWNUM, BV.*
FROM
(SELECT * FROM BOARD_VIEW ORDER BY BOARD_NO DESC) BV;

--페이지 번호를 조회, 한페이지당 게시글이 13개
--페이지 번호, 글번호, 제목, 조회수, 닉네임, 작성일, 댓글 개수, 좋아요, 싫어요
SELECT CEIL(ROWNUM / 13), BV.*
FROM
(SELECT * FROM BOARD_VIEW ORDER BY BOARD_NO DESC) BV;

--페이지번호 6번에 해당하는 게시글만 조회
SELECT * FROM 
(SELECT CEIL(ROWNUM / 13) AS PAGE_NO, BV.*
FROM
(SELECT * FROM BOARD_VIEW ORDER BY BOARD_NO DESC) BV)
WHERE PAGE_NO = 6;

--순위 구하는 함수
SELECT RANK() OVER(ORDER BY S.STD_SCORE DESC), S.* FROM STUDENT S;

--순위가 3등까지만 조회
SELECT * FROM 
(SELECT RANK() OVER(ORDER BY S.STD_SCORE DESC) AS STD_RANK, S.* FROM STUDENT S)
WHERE STD_RANK <= 3;


































