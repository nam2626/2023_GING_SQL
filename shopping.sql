--관리자 권한을 가진 계정 생성
CREATE USER SHOPPING_ADMIN IDENTIFIED BY 123456;
GRANT DBA TO SHOPPING_ADMIN;

---------------------------------
CREATE TABLE SHOPPING_MEMBER (
	MEMBER_ID	VARCHAR2(30)		NOT NULL,
	MEMBER_GRADE_NO	NUMBER(1)		NOT NULL,
	MEMBER_PASSWD	VARCHAR2(30)		NOT NULL,
	MEMBER_NAME	VARCHAR2(30)		NULL,
	MEMBER_TEL	CHAR(11)		NULL,
	MEMBER_EMAIL	VARCHAR2(50)		NULL,
	MEMBER_POINT	NUMBER		NULL,
	MEMBER_BIRTHDAY	DATE		NULL
);

CREATE TABLE SHOPPING_MEMBER_GRADE (
	MEMBER_GRADE_NO	NUMBER(1)		NOT NULL,
	MEMBER_GRADE_NAME	VARCHAR2(15)		NULL
);

CREATE TABLE SHOPPING_SELLER (
	SELLER_ID	VARCHAR2(30)		NOT NULL,
	SELLER_PASSWD	VARCHAR2(30)		NOT NULL,
	SELLER_BUSINESS_NO	CHAR(10)		NOT NULL,
	SELLER_BUSINESS_NAME	VARCHAR2(50)		NULL,
	SELLER_CEO	VARCHAR2(30)		NULL,
	SELLER_EMAIL	VARCHAR2(50)		NULL,
	SELLER_BUSINESS_TEL	CHAR(11)		NULL,
	SELLER_BUSINESS_TEL_NO	CHAR(20)		NULL,
	SELLER_BUSINESS_ADDRESS	VARCHAR2(100)		NULL
);

CREATE TABLE SHOPPING_PRODUCT (
	PRODUCT_NO	CHAR(8)		NOT NULL,
	SELLER_ID	VARCHAR2(30)		NOT NULL,
	PRODUCT_NAME	VARCHAR2(50)		NULL,
	PRODUCT_ORIGIN	VARCHAR2(50)		NULL,
	PRODUCT_EA	NUMBER		NULL,
	PRODUCT_PRICE	NUMBER		NULL,
	PRODUCT_KC_NO	VARCHAR2(24)		NULL,
	PRODUCT_MAIN_IMG	VARCHAR2(300)		NULL,
	PRODUCT_THUMBNAIL_IMG	VARCHAR2(300)		NULL,
	PRODUCT_ENABLE	NUMBER(1)		NULL,
	PRODUCT_REG_DATE	DATE	DEFAULT SYSDATE
);

CREATE TABLE SHOPPING_MEMBER_ADDRESS (
	MEMBER_ID	VARCHAR2(30)		NOT NULL,
	MEMBER_ADDRESS_NAME	VARCHAR2(30)		NULL,
	MEMBER_ADDRESS	VARCHAR2(100)		NULL,
	MEMBER_ADDRESS_TEL	CHAR(11)		NULL
);

CREATE TABLE SHOPPING_PRODUCT_REVIEW (
	MEMBER_ID	VARCHAR2(30)		NOT NULL,
	PRODUCT_NO	CHAR(8)		NOT NULL,
	PRODUCT_REVIEW_CONTENT	VARCHAR2(1500)		NULL,
	PRODUCT_STAR	NUMBER(1)		NULL,
	PRODUCT_REVIEW_DATE	DATE	DEFAULT SYSDATE
);

CREATE TABLE SHOPPING_CUPON (
	CUPON_NO	CHAR(8)		NOT NULL,
	SELLER_ID	VARCHAR2(30)		NOT NULL,
	CUPON_EXPIRE_DATE	DATE	DEFAULT SYSDATE+10,
	CUPON_PRICE	NUMBER		NULL
);

CREATE TABLE SHOPPING_PARCEL (
	PARCEL_NO	CHAR(4)		NOT NULL,
	SELLER_ID	VARCHAR2(30)		NOT NULL,
	PARCEL_NAME	VARCHAR2(50)		NULL,
	PARCEL_TEL_NO	CHAR(11)		NULL,
	PARCEL_PRICE	NUMBER		NULL
);

CREATE TABLE SHOPPING_ORDER (
	ORDER_NO	CHAR(8)		NOT NULL,
	MEMBER_ID	VARCHAR2(30)		NOT NULL,
	PRODUCT_NO	CHAR(8)		NOT NULL,
	SELLER_ID	VARCHAR2(30)		NOT NULL,
	CUPON_NO	CHAR(8)		NOT NULL,
	ORDER_DATE	DATE	DEFAULT SYSDATE,
	ORDER_ADDRESS	VARCHAR2(100)		NULL,
	ORDER_ADDRESS_NAME	VARCHAR2(50)		NULL,
	ORDER_ADDRESS_TEL	CHAR(11)		NULL,
	ORDER_EA	NUMBER		NULL,
	ORDER_CREDIT_MONEY	NUMBER		NULL,
	ORDER_PARCEL_STATE	NUMBER(1)	DEFAULT 0,
	ORDER_CREDIT_KIND	NUMBER(1)		NULL,
	ORDER_STATE	NUMBER(1)	DEFAULT 0
);

ALTER TABLE SHOPPING_MEMBER ADD CONSTRAINT PK_SHOPPING_MEMBER PRIMARY KEY (
	MEMBER_ID);

ALTER TABLE SHOPPING_MEMBER_GRADE ADD CONSTRAINT PK_SHOPPING_MEMBER_GRADE PRIMARY KEY (
	MEMBER_GRADE_NO
);

ALTER TABLE SHOPPING_SELLER ADD CONSTRAINT PK_SHOPPING_SELLER PRIMARY KEY (
	SELLER_ID
);

ALTER TABLE SHOPPING_PRODUCT ADD CONSTRAINT PK_SHOPPING_PRODUCT PRIMARY KEY (
	PRODUCT_NO
);

ALTER TABLE SHOPPING_PRODUCT_REVIEW ADD CONSTRAINT PK_SHOPPING_PRODUCT_REVIEW PRIMARY KEY (
	MEMBER_ID,
	PRODUCT_NO
);

ALTER TABLE SHOPPING_CUPON ADD CONSTRAINT PK_SHOPPING_CUPON PRIMARY KEY (
	CUPON_NO
);

ALTER TABLE SHOPPING_PARCEL ADD CONSTRAINT PK_SHOPPING_PARCEL PRIMARY KEY (
	PARCEL_NO
);

ALTER TABLE SHOPPING_ORDER ADD CONSTRAINT PK_SHOPPING_ORDER PRIMARY KEY (
	ORDER_NO
);

ALTER TABLE SHOPPING_MEMBER ADD CONSTRAINT FK_SHOPPING_MEMBER_GRADE FOREIGN KEY (
	MEMBER_GRADE_NO
)
REFERENCES SHOPPING_MEMBER_GRADE (
	MEMBER_GRADE_NO
);

ALTER TABLE SHOPPING_PRODUCT ADD CONSTRAINT FK_SHOPPING_SELLER_ID FOREIGN KEY (
	SELLER_ID
)
REFERENCES SHOPPING_SELLER (
	SELLER_ID
);

ALTER TABLE SHOPPING_MEMBER_ADDRESS ADD CONSTRAINT FK_SHOPPING_MEMBER_ID FOREIGN KEY (
	MEMBER_ID
)
REFERENCES SHOPPING_MEMBER (
	MEMBER_ID
);

ALTER TABLE SHOPPING_CUPON ADD CONSTRAINT FK_SHOPPING_CUPON_ID FOREIGN KEY (
	SELLER_ID
)
REFERENCES SHOPPING_SELLER (
	SELLER_ID
);

ALTER TABLE SHOPPING_PARCEL ADD CONSTRAINT FK_SHOPPING_PARCEL_ID FOREIGN KEY (
	SELLER_ID
)
REFERENCES SHOPPING_SELLER (
	SELLER_ID
);

ALTER TABLE SHOPPING_ORDER ADD CONSTRAINT FK_SHOPPING_ORDER_MEMBER_ID FOREIGN KEY (
	MEMBER_ID
)
REFERENCES SHOPPING_MEMBER (
	MEMBER_ID
);

ALTER TABLE SHOPPING_ORDER ADD CONSTRAINT FK_SHOPPING_ORDER_PRODUCT_NO FOREIGN KEY (
	PRODUCT_NO
)
REFERENCES SHOPPING_PRODUCT (
	PRODUCT_NO
);

ALTER TABLE SHOPPING_ORDER ADD CONSTRAINT FK_SHOPPING_ORDER_SELLER_ID FOREIGN KEY (
	SELLER_ID
)
REFERENCES SHOPPING_SELLER (
	SELLER_ID
);

ALTER TABLE SHOPPING_ORDER ADD CONSTRAINT FK_SHOPPING_ORDER_CUPON_NO FOREIGN KEY (
	CUPON_NO
)
REFERENCES SHOPPING_CUPON (
	CUPON_NO
);
----------------------------
SELECT * FROM shopping_member sm ;

--데이터 사전(Data Dictionary)
SELECT * FROM USER_TABLES;
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_VIEWS;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_OBJECTS;

SELECT * FROM DBA_USERS;

-----------------------------
--리뷰 데이터 한건 저장하는 프로시저
--리뷰 등록이 되면 리뷰 등록이 완료되었습니다.
--리뷰 등록을 이미한 건이라면 이미 리뷰를 하셨습니다. 메세지를 출력
--dbms_output.put_line()
CREATE OR REPLACE PROCEDURE INSERT_PRODUCT_REVIEW(
IN_MEMBER_ID IN VARCHAR2,
IN_PRODUCT_NO IN VARCHAR2,
IN_PRODUCT_REVIEW_CONTENT IN VARCHAR2,
IN_PRODUCT_STAR IN NUMBER
)
IS
	SELECT_COUNT NUMBER;
BEGIN
	--INSERT 하기전에 데이터를 체크 후 EXCEPTION
	SELECT COUNT(*) INTO SELECT_COUNT FROM SHOPPING_PRODUCT_REVIEW 
	WHERE MEMBER_ID LIKE IN_MEMBER_ID
	AND PRODUCT_NO LIKE IN_PRODUCT_NO;
	
--	dbms_output.put_line(SELECT_COUNT);
	INSERT INTO SHOPPING_PRODUCT_REVIEW(MEMBER_ID,PRODUCT_NO,PRODUCT_REVIEW_CONTENT,PRODUCT_STAR)
	VALUES(IN_MEMBER_ID,IN_PRODUCT_NO,IN_PRODUCT_REVIEW_CONTENT,IN_PRODUCT_STAR);
	COMMIT;
	dbms_output.put_line('리뷰 등록 완료');	
	EXCEPTION 
		WHEN OTHERS THEN
			dbms_output.put_line('이미 등록된 리뷰 입니다.');
END;

/
DECLARE

begin
	INSERT_PRODUCT_REVIEW('f8d8r685070','xu2105ht','후기 메세지',3);
end;

/

--제품 등록일이 8월인 데이터만 조회
SELECT * FROM SHOPPING_PRODUCT  
WHERE to_char(PRODUCT_REG_DATE,'MM') = '08'; 

--인덱스 생성
CREATE INDEX PRODUC_IDX_REG_DATE 
ON SHOPPING_PRODUCT(PRODUCT_REG_DATE);

ALTER INDEX PRODUC_IDX_REG_DATE REBUILD;

--인덱스 통계정보 생성
ANALYZE INDEX PRODUC_IDX_REG_DATE VALIDATE STRUCTURE;
--인덱스 밸런싱 확인
SELECT (DEL_LF_ROWS_LEN/LF_ROWS_LEN)*100 AS BAL FROM INDEX_STATS;














