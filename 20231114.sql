--값이 널일때 나타낼 값, 널이 아니면 조회된 값을 출력
SELECT NVL(NULL ,'널값입니다') FROM dual;
--값이 널 일때와 널이 아닐때 나타낼 값을 설정하는 함수
SELECT NVL2(1,'true','false') FROM dual; 
------------------------------------------
--- 서브 쿼리
------------------------------------------
--학생 정보 조회
--학번 이름 학과명 평점
SELECT s.STD_NO, s.STD_NAME, s.STD_SCORE,
(SELECT m.MAJOR_NAME FROM MAJOR m WHERE m.MAJOR_NO = s.MAJOR_NO)
AS MAJOR_NAME 
FROM STUDENT s;

--자동차 정보 조회
--자동차 모델번호, 모델명, 제조년도, 금액, 제조사
SELECT c.CAR_ID, c.CAR_NAME, c.CAR_MAKE_YEAR, c.CAR_PRICE,
(SELECT cm.CAR_MAKER_NAME FROM CAR_MAKER cm 
WHERE c.CAR_MAKER_CODE = cm.CAR_MAKER_CODE)
FROM CAR c;

SELECT c.CAR_ID, c.CAR_NAME, c.CAR_MAKE_YEAR, c.CAR_PRICE, cm.CAR_MAKER_NAME 
FROM CAR c JOIN CAR_MAKER cm ON c.CAR_MAKER_CODE = cm.CAR_MAKER_CODE;

--최고 평점을 가지고 있는 학생을 조회
SELECT *
FROM STUDENT
WHERE STD_SCORE = (SELECT max(STD_SCORE) FROM STUDENT);

--학생들 중 평점의 평균 이상인 학생만 조회
SELECT * FROM STUDENT
WHERE STD_SCORE >= (SELECT AVG(STD_SCORE) FROM STUDENT);

--각 학과별 최고 득점자인 학생 정보를 출력
SELECT s.*
FROM STUDENT s,
(SELECT MAJOR_NO, MAX(STD_SCORE) AS MAX_SCORE  FROM STUDENT GROUP BY MAJOR_NO) a
WHERE s.MAJOR_NO = a.MAJOR_NO AND s.STD_SCORE = a.MAX_SCORE;

SELECT * FROM STUDENT
WHERE (MAJOR_NO, STD_SCORE) 
in(SELECT MAJOR_NO, MAX(STD_SCORE) AS MAX_SCORE  FROM STUDENT GROUP BY MAJOR_NO);

--장학금을 받는 학생들만 조회, 단 in, 서브쿼리를 활용해서 조회
SELECT * FROM STUDENT
WHERE STD_NO IN(SELECT STD_NO FROM STUDENT_SCHOLARSHIP);

--장학금을 받지 못하는 학생들을 조회
SELECT * FROM STUDENT
WHERE STD_NO NOT IN(SELECT STD_NO FROM STUDENT_SCHOLARSHIP);

--평균 이하인 학생들의 평점을 0.5점 증가
UPDATE student SET STD_SCORE = STD_SCORE + 0.5
WHERE STD_SCORE  <= (SELECT AVG(STD_SCORE) FROM STUDENT s);

--정렬 : ASC, DESC
--학생 정보 전부 출력 : 학번, 이름, 학과명, 평점
SELECT s.STD_NO, s.STD_NAME, s.STD_SCORE, m.MAJOR_NAME
FROM STUDENT s JOIN  MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
ORDER BY MAJOR_NAME DESC;

SELECT s.STD_NO, s.STD_NAME, s.STD_SCORE, m.MAJOR_NAME
FROM STUDENT s JOIN  MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
ORDER BY STD_SCORE DESC;

--학생 정보 출력시 정렬 - 학과명 : 오름차순, 평점 : 내림차순
SELECT s.STD_NO, s.STD_NAME, s.STD_SCORE, m.MAJOR_NAME
FROM STUDENT s JOIN  MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
ORDER BY MAJOR_NAME ASC, STD_SCORE DESC;

--위에 SQL로 행번호 붙여서 조회
SELECT ROWNUM, s.STD_NO, s.STD_NAME, s.STD_SCORE, m.MAJOR_NAME
FROM STUDENT s JOIN  MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
ORDER BY MAJOR_NAME ASC, STD_SCORE DESC;

SELECT ROWNUM, S.*
FROM
(SELECT s.STD_NO, s.STD_NAME, s.STD_SCORE, m.MAJOR_NAME
FROM STUDENT s JOIN  MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
ORDER BY MAJOR_NAME ASC, STD_SCORE DESC) S;

--제조사별 차량 종류 개수, 평균 정가를 조회
--제조사명, 개수, 정가 평균 
SELECT 
	(SELECT CM.CAR_MAKER_NAME FROM CAR_MAKER CM 
	WHERE CM.CAR_MAKER_CODE = C.CAR_MAKER_CODE) AS CAR_MAKER,
	C.CAR_COUNT, C.AVG_PRICE
FROM
(SELECT CAR_MAKER_CODE, 
COUNT(*) AS CAR_COUNT, AVG(CAR_PRICE) AS AVG_PRICE 
FROM CAR
GROUP BY CAR_MAKER_CODE) C;

----최대 판매가와 최소 판매가를 가진 차량의 정보를 조회











